- name: Gather instance facts
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ groups['etcd'] | union(groups['worker']) | union(groups['master']) | unique }}"

- name: deploy - add required internal IP addreses to hosts file
  blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR ETCD LAN IP(S)"
    state: present
    block: |
      # etcd cluster
      {% for host in groups['etcd'] %}
      {{  hostvars[host].ansible_default_ipv4.address }} {{ host }}
      {% endfor %}
      # worker nodes (needed for things like getting logs)
      {% for host in groups['worker'] %}
      {{  hostvars[host].ansible_default_ipv4.address }} {{ host }}
      {% endfor %}
      # other master nodes
      {% for host in groups['master'] %}
      {{  hostvars[host].ansible_default_ipv4.address }} {{ host }}
      {% endfor %}

- name: Create kubernetes group
  group:
    name: kubernetes
    system: true
    state: present

- name: Create kube-controller-manager user
  user:
    name: kube-controller-manager
    system: true
    group: kubernetes
    create_home: false
    state: present

- name: Create config directory
  file:
    path: /etc/kubernetes
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Copy common certificates
  copy:
    src: "{{ item }}"
    dest: /etc/kubernetes/
    owner: root
    group: root
    mode: 0644
  loop:
    - '{{ k8s_pki_dir }}/k8s-ca.crt'
    - '{{ k8s_pki_dir }}/k8s-ca.key'
    - '{{ etcd_pki_dir }}/etcd-server-ca.crt'
    - '{{ k8s_pki_dir }}/apiserver-kubelet-client.crt'
    - '{{ k8s_pki_dir }}/apiserver-kubelet-client.key'
    - '{{ k8s_pki_dir }}/service-account.crt'
    - '{{ k8s_pki_dir }}/service-account.key'
    - '{{ etcd_pki_dir }}/kube-apiserver-etcd-client.crt'
    - '{{ etcd_pki_dir }}/kube-apiserver-etcd-client.key'

- name: Copy controller-manager kubeconfig
  copy:
    src: "{{ kubeconfig_dir }}/kube-controller-manager.kubeconfig"
    dest: /etc/kubernetes
    owner: root
    group: root
    mode: 0644

- name: Copy kube-scheduler kubeconfig
  copy:
    src: "{{ kubeconfig_dir }}/kube-scheduler.kubeconfig"
    dest: /etc/kubernetes
    owner: root
    group: root
    mode: 0644

- name: Copy kube-scheduller config file
  template:
    src: etc/kubernetes/kube-scheduler-config.yaml
    dest: /etc/kubernetes/kube-scheduler-config.yaml
    owner: root
    group: root
    mode: 0644

- name: Copy ceritifcate and keys for apiserver
  copy:
    src: "{{ item }}"
    dest: /etc/kubernetes
    owner: root
    group: root
    mode: 0644
  loop:
    - '{{ k8s_pki_dir }}/{{ inventory_hostname }}-apiserver.crt'
    - '{{ k8s_pki_dir }}/{{ inventory_hostname }}-apiserver.key'

- name: Copy encryption-config.yaml
  template:
    src: etc/kubernetes/encryption-config.yaml
    dest: /etc/kubernetes/encryption-config.yaml
    owner: root
    group: root
    mode: 0644

- name: Copy apisever systemd unit file
  template:
    src: lib/systemd/system/kube-apiserver.service.j2
    dest: /lib/systemd/system/kube-apiserver.service
    owner: root
    group: root
    mode: 0644
  notify:
    - restart kube-apiserver

- name: Copy kube-controller-manager systemd unit file
  template:
    src: lib/systemd/system/kube-controller-manager.service.j2
    dest: /lib/systemd/system/kube-controller-manager.service
    owner: root
    group: root
    mode: 0644
  notify:
    - restart kube-controller-manager

- name: Copy kube-scheduluer systemd unit file
  template:
    src: lib/systemd/system/kube-scheduler.service.j2
    dest: /lib/systemd/system/kube-scheduler.service
    owner: root
    group: root
    mode: 0644
  notify:
    - restart kube-scheduler

- meta: flush_handlers
